Pebble.AssetLoader = class { constructor() { Object.assign(this, { toLoad: 0, loaded: 0, imageExtensions: ["png", "jpg", "gif"], fontExtensions: ["ttf", "otf", "ttc", "woff"], jsonExtensions: ["json"], audioExtensions: ["mp3", "ogg", "wav", "webm"], load(e, t = !1) { return new Promise(s => { let o = () => { this.loaded += 1, t && console.log(this.loaded), this.toLoad === this.loaded && (this.toLoad = 0, this.loaded = 0, t && console.log("Assets finished loading"), s()) }; t && console.log("Loading assets..."), this.toLoad = e.length, e.forEach(e => { let t = e.split(".").pop(); -1 !== this.imageExtensions.indexOf(t) ? this.loadImage(e, o) : -1 !== this.fontExtensions.indexOf(t) ? this.loadFont(e, o) : -1 !== this.jsonExtensions.indexOf(t) ? this.loadJson(e, o) : -1 !== this.audioExtensions.indexOf(t) ? this.loadSound(e, o) : console.log("File type not recognized: " + e) }) }) }, loadImage(e, t) { let s = new Image; s.addEventListener("load", t, !1), this[e] = s, s.src = e }, loadFont(e, t) { let s = e.split("/").pop().split(".")[0], o = document.createElement("style"), n = "@font-face {font-family: '" + s + "'; src: url('" + e + "');}"; o.appendChild(document.createTextNode(n)), document.head.appendChild(o), t() }, loadJson(e, t) { let s = new XMLHttpRequest; s.open("GET", e, !0), s.responseType = "text", s.onload = (o => { if (200 === s.status) { let o = JSON.parse(s.responseText); o.name = e, this[o.name] = o, o.frames ? this.createTilesetFrames(o, e, t) : t() } }), s.send() }, createTilesetFrames(e, t, s) { let o = t.replace(/[^\/]*$/, "") + e.meta.image, n = new Image; n.addEventListener("load", () => { this[o] = n, Object.keys(e.frames).forEach(t => { this[t] = e.frames[t], this[t].source = n }), s() }, !1), n.src = o }, loadSound(e, t) { let s = makeSound(e, t); s.name = e, this[s.name] = s } }) } };